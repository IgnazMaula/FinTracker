@using System.Net.Http.Json
@inject HttpClient Http

<ApexChart TItem="StockPrice" Title="Market Overview: SOL-USD" Options="ChartOptions">
    <ApexCandleSeries TItem="StockPrice"
                      Items="@stockPrices"
                      Name="Crypto OHLC"
                      XValue="@(e => e.Timestamp)"
                      Open="@(e => e.Open)"
                      High="@(e => e.High)"
                      Low="@(e => e.Low)"
                      Close="@(e => e.Close)" />
</ApexChart>

@code {
    private List<StockPrice> stockPrices = new();
    private ApexChartOptions<StockPrice> ChartOptions = new();

    protected override async Task OnInitializedAsync()
    {
        SetChartOptions();
        await LoadChartData();
    }

    private void SetChartOptions()
    {
        ChartOptions = new ApexChartOptions<StockPrice>
            {
                Chart = new Chart
                {
                    Toolbar = new Toolbar
                    {
                        Show = false // Disables toolbar (zoom, pan, reset)
                    },
                    Zoom = new Zoom
                    {
                        Enabled = false // Disables zoom
                    }
                },
                Xaxis = new XAxis
                {
                    Labels = new XAxisLabels { Show = true }
                },
                Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Labels = new YAxisLabels { Show = true }
                }
            }
            };
    }

    private async Task LoadChartData()
    {
        var url = $"https://api.coingecko.com/api/v3/coins/solana/ohlc?vs_currency=usd&days=7";
        var response = await Http.GetFromJsonAsync<List<List<double>>>(url);

        if (response != null)
        {
            stockPrices = response.Take(30).Select(p => new StockPrice
                {
                    Timestamp = DateTimeOffset.FromUnixTimeMilliseconds((long)p[0]).ToString("yyyy-MM-dd HH:mm"),
                    Open = (decimal)p[1],
                    High = (decimal)p[2],
                    Low = (decimal)p[3],
                    Close = (decimal)p[4]
                }).ToList();
        }
    }

    public class StockPrice
    {
        public string Timestamp { get; set; }
        public decimal Open { get; set; }
        public decimal High { get; set; }
        public decimal Low { get; set; }
        public decimal Close { get; set; }
    }
}
